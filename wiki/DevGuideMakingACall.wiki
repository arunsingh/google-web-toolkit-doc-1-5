#summary How to make a remote procedure call from the client

=Actually Making a Call=

The process of making an RPC from the client always involves the same steps: 

  # Instantiate the service interface using [http://google-web-toolkit-doc-1-5.googlecode.com/svn/javadoc/1.5/com/google/gwt/core/client/GWT.html#create(java.lang.Class) GWT.create()].
  # Create an asynchronous callback object to be notified when the RPC has completed.
  # Make the call.

==Example==

Suppose you want to call a method on a service interface defined as follows:  

{{{
public interface MyEmailService extends RemoteService {
  void emptyMyInbox(String username, String password);
}
}}}

Its corresponding asynchronous interface will look like this:  

{{{
public interface MyEmailServiceAsync {
  void emptyMyInbox(String username, String password,
      AsyncCallback callback);
}
}}}

The client-side call will look like this:  

{{{
public void menuCommandEmptyInbox() {
  // (1) Create the client proxy. Note that although you are creating the
  // service interface proper, you cast the result to the asynchronous
  // version of the interface. The cast is always safe because the 
  // generated proxy implements the asynchronous interface automatically.
  // The RemoteServiceRelativePath annotation automatically calls 
  // setServiceEntryPoint()
  //
  @RemoteServiceRelativePath("email")
  MyEmailServiceAsync emailService = (MyEmailServiceAsync) GWT.create(MyEmailService.class);

  // (2) Create an asynchronous callback to handle the result.
  //
  AsyncCallback callback = new AsyncCallback() {
    public void onSuccess(Object result) {
      // do some UI stuff to show success
    }

    public void onFailure(Throwable caught) {
      // do some UI stuff to show failure
    }
  };

  // (3) Make the call. Control flow will continue immediately and later
  // 'callback' will be invoked when the RPC completes.
  //
  emailService.emptyMyInbox(fUsername, fPassword, callback);
}
}}}

It is safe to cache the instantiated service proxy to avoid creating it for subsequent calls.  For example, you can instantiate the service proxy in the module's `onModuleLoad()` method and save the resulting instance as a class member.

{{{
    public class Foo implements EntryPoint {
      private MyEmailServiceAsync myEmailService;

      public void onModuleLoad() {
        
        myEmailService = (MyEmailServiceAsync)GWT.create(MyEmailService.class);
        ServiceDefTarget endpoint = (ServiceDefTarget) myEmailService;
        String moduleRelativeURL = GWT.getModuleBaseURL() + "email";
        endpoint.setServiceEntryPoint(moduleRelativeURL);

        // ... other initialization
      }

      /**
       * Make a GWT-RPC call to the server.  The myEmailService class member 
       * was initalized when the module started up.
       */
      void sendEmail (String message) {
          myEmailService.sendEmail(message, new AsyncCallback() {

            public void onFailure(Throwable caught) {
              Window.alert("RPC to sendEmail() failed.");
            }

            public void onSuccess(Object result) {
              String resultString = (String)result;
              label.setText(resultString);
            }
          });
      }
    }
}}}

===See Also===

  * [http://google-web-toolkit-doc-1-5.googlecode.com/svn/javadoc/1.5/com/google/gwt/user/client/rpc/RemoteService.html RemoteService]

  * [http://google-web-toolkit-doc-1-5.googlecode.com/svn/javadoc/1.5/com/google/gwt/user/client/rpc/ServiceDefTarget.html ServiceDefTarget]

  * [http://google-web-toolkit-doc-1-5.googlecode.com/svn/javadoc/1.5/com/google/gwt/core/client/GWT.html#create(java.lang.Class) GWT.create(Class)]

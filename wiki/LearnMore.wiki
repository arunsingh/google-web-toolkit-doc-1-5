#summary Google Web Toolkit overview of features.

 
=Google Web Toolkit= 
[http://gwt-test-project-1.googlecode.com/files/gwtLogo.png]
===Performance for Users, Productivity for Developers===
Writing web apps today is a tedious and error-prone process. Developers can spend 90% of their time working around browser quirks. In addition, building, reusing, and maintaining large !JavaScript code bases and AJAX components can be difficult and fragile. 

Google Web Toolkit (GWT) eases this burden by allowing developers to quickly build and maintain complex yet highly performant !JavaScript front-end applications in the Java programming language. Here's how it works:

===How Google Web Toolkit Works===
With Google Web Toolkit, you write your AJAX front-end in Java using your favorite Java programming language tools along the way.

While developing your app, use GWT's Hosted Mode browser to test and iterate in the same "tweak/view" cycle you're accustomed, accept that now you'll be able to also use Java debugging tools. 

Using GWT for your front-end doesn't mean you have to use Java for the backend. GWT provides various means of communicating with a backend server, including GWT-RPC and JSON.

When you are ready to deploy, compile your Java source code to plain !JavaScript using the GWT compiler, then deploy to any website or server. You can build one widget for an existing web page or an entire application in GWT.

[http://google-web-toolkit-doc-1-5.googlecode.com/files/diagram.png]

===Real debugging in GWT Hosted Mode===
In production, your code is compiled to !JavaScript, but at development time it runs in the Java virtual machine. That means when your code performs an action like handling a mouse event, you get full-featured Java debugging, with exceptions and the advanced debugging features of IDEs like [http://www.eclipse.org/ Eclipse]. [DevGuideHostedMode Learn more.]


===Compiler Optimizations Equal High performance !JavaScript===
The GWT compiler performs static analysis across your entire GWT codebase, optimizing the final !JavaScript to load and execute faster than most hand-written !JavaScript. For instance, the compiler may determine that a function's method body can be inlined, reducing both !JavaScript code that would otherwise be downloaded to the browser and 2) execution time when the program is run. 

This allows you to develop your application with maintainable abstractions and modularity without performance penalizations.  [http://more Learn more.]


=== Cross Browser Support for free === 
Your GWT applications automatically support IE, Firefox, Mozilla, Safari, and Opera with no browser detection or special-casing within your code. You write the same code once, GWT transforms it into the most performant !JavaScript for the user's particular browser. [DevGuideCrossBrowserSupport Learn more.]


===Per-Browser, Per-Locale, Per-Whatever optimized code===
Deferred binding is a feature of the GWT compiler that works by generating many versions of code at compile time, only one of which needs to be loaded by a particular client during bootstrapping at runtime. Each version is generated on a per browser basis, along with any other axis that your application defines or uses. For example, if you were to internationalize your application using GWT's [DevGuideInternationalization Internationalization module], the GWT compiler would generate versions of your application per browser environment, such as "Firefox in English", "Firefox in French", "Internet Explorer in English", etc... As a result, the deployed !JavaScript code is compact and quicker to download than if you coded if/then statements into your hand-written JavaScript, containing only the code and resources it needs for a particular browser environment. [DevGuideDeferredBinding Learn more.]


===Dynamic, reusable UI components===
Create reusable [DevGuideUserInterface Widgets] by compositing other Widgets, then easily lay them out automatically in [DevGuideUserInterface Panels]. Want to reuse your Widget in another project? Simple package it up for others to use in a JAR file. [DevGuideUserInterface Learn more.]



===Productive Coding and Tools===
Because GWT uses Java, you can use all of your favorite Java development tools ([http://www.eclipse.org/ Eclipse], [http://www.jetbrains.com/idea/ IntelliJ], [http://www.ej-technologies.com/products/jprofiler/overview.html JProfiler], [http://www.junit.org/ JUnit]) for your web browser AJAX development. This allows a web developer to harness the productivity gains of automated Java refactoring and code prompting/completion.


Static type checking in the Java language enables developers to catch a class of !JavaScript bugs (typos, type mismatches) when writing code rather than at runtime, boosting productivity while reducing errors. No more user discovered accidental var assignments.

Finally, you can take advantage of Java-based OO designs patterns and abstractions that are easy to understand and maintain without your user incurring any runtime performance costs thanks to the compiler optimizations.


===Really simple RPC=== 
To communicate from your web application to your web server, you just need to define serializable Java classes for your request and response. In production, GWT automatically serializes the request and deserializes the response from the server. GWT's RPC mechanism can even handle polymorphic class hierarchies, and you can throw exceptions across the wire. [DevGuideRemoteProcedureCalls Learn more.]


===Interoperability and fine-grained control===
If GWT's class library doesn't meet your needs, you can mix handwritten !JavaScript in your Java source code using our [DevGuideJavaScriptNativeInterface !JavaScript Native Interface (JSNI)]. [DevGuideJavaScriptNativeInterface Learn more.]

In GWT 1.5, the concept of Java Overlay Types is introduced...blah blah


=== Browser history management===
No, AJAX applications _don't_ need to break the browser's back button. GWT lets you make your site more usable by easily adding state to the browser's back button history. [DevGuideHistory Learn more]


===JUnit integration===
GWT's direct integration with [http://junit.org/ JUnit] lets you unit test both in a debugger and in a browser...and you can even unit test asynchronous RPCs. [DevGuideJUnitIntegration Learn more.]


===Internationalization===
Easily create efficient internationalized applications and libraries using GWT's powerful Deferred Binding techniques. [DevGuideInternationalization Learn more]


===Google API Libraries===
blah blah [http://code.google.com/p/gwt-google-apis/ Learn more]


===Completely Open Source===
All of the code for GWT is available under the Apache 2.0 license. If you are interested in contributing, please visit [http://code.google.com/webtoolkit/makinggwtbetter.html Making GWT Better]. [http://code.google.com/p/google-web-toolkit/ Learn more.]



===Next Steps===
For a step-by-step installation guide and tutorial, please see the [GettingStarted Getting Started Guide]. 
#summary Description of GWT's support for ARIA

= Adding Accessibility Support to GWT Widgets =

== Screen Readers ==
A screen reader is an assistive application that interprets what is displayed on the screen for a blind or visually impaired user. Screen readers can interact with the user in a variety of ways, including speaking out loud or even producing a braille output.
Who uses screen readers?

Many people find it helpful to be able to interact with their computers in multiple ways. Though Google does not keep statistics on how many of our users are using screen readers, as the population ages more and more people will require assistive technology. It is important to make sure that Google products are accessible for everybody.
How do screen readers work?

Screen readers listen for a standard set of events that are raised by platform-specific APIs. For example, when an alert window pops up on your screen, Microsoft Windows would expose this event using the Microsoft Active Accessibility API, while a Linux machine would use the Linux Access Toolkit. A screen reader will then communicate this change to the user.

== GWT + Screen Readers ==
Screen readers are listening for specific events to be raised by the browser. Dynamic applications, however, are very often written in ways that the browser has difficulty interpreting correctly. A GWT developer writing the tree widget, for example, might use a list element that has been altered to behave like a tree control. But a screen reader would present the control as a list - an incorrect description that renders the tree unusable. Screen readers will also treat HTML span or div elements as regular static text elements, regardless of the presence of JavaScript event handlers for user interaction.
ARIA and GWT

Adding accessibility support to GWT widgets involves adding information into the DOM that can then be used by browsers to raise the necessary accessibility events during user interaction. These special DOM properties enable screen readers to more accurately represent the purpose and function of GWT widgets. The collection of these DOM properties is a work in progress at the W3C and is commonly referred to as ARIA. Firefox (2.0 and later) is currently the only browser that offers an ARIA implementation.

Role: The ARIA property role is an indication of the widget type, and therefore predicts the way the widget should behave. A role is static and does not change over the lifetime of a widget.

Some examples of ARIA roles:
    * tree
    * menubar
    * menuitem
    * tab

State: The ARIA property STATE is an additional attribute that reflects the current state of a widget - for example, whether a checkbox is checked or unchecked. A STATE is dynamic and should be updated during user interaction.

Some examples of ARIA states:

    * aria-disabled
    * aria-pressed
    * aria-expanded
    * aria-haspopup

Once ARIA roles and states are added to the DOM of a GWT widget, Firefox will raise the appropriate events to the screen reader. As ARIA is still a work in progress, Firefox may not raise an event for every ARIA property, and screenreaders may not recognize all of the events being raised.

Keyboard accessibility is also a key requirement when access-enabling GWT widgets. Screenreaders will speak the element that has keyboard focus, so keyboard accessibility can be accomplished by moving focus to different elements in response to keyboard commands.


== Which GWT widgets were affected? ==

Keyboard accessibility and ARIA properties were added to a variety of GWT widgets, including trees, menus, tab panels, and more. We were able to get accessibility support for some GWT widgets for free. The base element for the GWT Checkbox, Listbox, and RadioButton widgets are their equivalent native HTML controls. Screen readers know how to interpret and react to changes in these native controls, so no ARIA roles or states needed to be added to these controls. In fact, adding unecessary roles and states could have a detrimental effect if a particular screen reader does not recognize the role/state. In such a case, the screen reader would not provide any information when the control was selected, because it would not treat the control as a native HTML control, and it would not have a recognizable ARIA role/state to use for interpretation.

Other widgets, such as the GWT Menu and !TabBar widgets originally lacked any support for keyboard navigation, which is essential when building accessible web applications.

Keyboard accessibility in particular is a problem for GWT applications. Because screen readers traditionally speak the elements on a page that have focus, keyboard navigation requires setting focus on different elements in response to keyboard commands. But different browsers have different rules about which elements can get keyboard focus. GWT by design is browser-agnostic, a feature which allows web developers to design their applications without worrying about incompatibilities between browsers. But this makes it keyboard accessibility complicated because a cross-browser solution for setting focus may not exist.
Testing

The access-enabled GWT widgets were tested using a variety of different methods. There are basically three steps in the transition between the DOM and the screen reader.

    * The DOM. Because the ARIA properties are being added directly to the DOM, an easy way to make sure that the properties are in the right location is to use a tool like the Firefox add-on Firebug that allows you to inspect the DOM of a widget.
    * Events. It is important to make sure that Firefox is raising the appropriate events in response to the added ARIA properties, changes in focus, and changes in the widget itself. A Microsoft tool called the Accessible Event Watcher, or AccEvent, allows developers to check which events are being raised.
    * The screen reader. Using a screen reader to test the accessibility of GWT widgets is essential. Some screen readers may not be listening for all of the events raised by Firefox, or they might expect the ARIA properties to be added to the DOM in certain locations. The most widely used screen readers with some support for ARIA are JAWS and Window-Eyes. !FireVox, a text-to-speech add-on for Firefox, also includes support for ARIA.